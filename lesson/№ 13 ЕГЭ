В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, а какая - к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети. Сеть задана IP-адресом 174.114.120.0 и маской сети 255.255.252.0. Сколько в этой сети IP-адресов, для которых сумма единиц в двоичной записи IP-адреса чётна?
------------------
from ipaddress import *
net = ip_network('174.114.120.0/255.255.252.0', 0)
k = 0
for x in net:
    s = f'{x:b}'
    if s.count('1') % 2 == 0:
        k += 1
print(k)
----------------
В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

Для узла с IP-адресом 130.140.241.137 адрес сети равен 130.140.240.0. Каково наибольшее возможное количество единиц в двоичной записи маски?

В ответе укажите только число.
-----------------
from ipaddress import ip_network

for x in range (33):
    net = ip_network(f'130.140.241.137/{x}', 0)
    print(net, x, net.netmask)
-----------------
В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

Для узла с IP-адресом 168.224.22.193 адрес сети равен 168.224.16.0. Каково наименьшее возможное количество единиц в двоичной записи маски?

В ответе укажите только число.
----------------
from ipaddress import ip_network

for x in range (33):
    net = ip_network(f'168.224.22.193/{x}', 0)
    print(net, x, net.netmask)
----------------
В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, а какая - к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

Для узла с IP адресом 158.116.11.146 адрес сети равен 158.116.0.0. Для скольких различных значений маски это возможно?
----------------
from ipaddress import ip_network

for x in range (33):
    net = ip_network(f'158.116.11.146/{x}', 0)
    print(net, x, net.netmask) # и считаем, сколько там 
---------------
В терминологии сетей TCP/IP маской сети называют двоичное число, которое показывает, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу узла в этой сети. Адрес сети получается в результате применения поразрядной конъюнкции к заданному адресу узла и маске сети.

Сеть задана IP-адресом 151.192.0.0 и маской сети 255.224.0.0. Сколько в этой сети IP-адресов, у которых количество единиц и количество нулей в двоичной записи IP-адреса одинаково?

В ответе укажите только число.
---------------
from ipaddress import ip_network

net = ip_network('151.192.0.0/255.224.0.0', 0)
k = 0
for x in net:
    s = f'{x:b}'
    if s.count('0') == s.count('1'):
        k+=1
print(k)
-------------
В терминологии сетей TCP/IP маска сети – это двоичное число, меньшее 
2
32
2 
32
 ; в маске сначала (в старших разрядах) стоят единицы, а затем с некоторого места нули.

Маска определяет, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу самого узла в этой сети. Обычно маска записывается по тем же правилам, что и IP-адрес – в виде четырёх байт, причём каждый байт записывается в виде десятичного числа. Адрес сети получается в результате применения поразрядной конъюнкции к заданному IP-адресу узла и маске.

Например, если IP-адрес узла равен 131.32.255.131, а маска равна 255.255.240.0, то адрес сети равен 131.32.240.0.

Два узла, находящиеся в одной сети, имеют IP-адреса 112.117.107.70 и 112.117.121.80. Укажите наименьшее возможное количество адресов в этой сети.
--------------
from ipaddress import ip_network

for x in range (33):
    net1 = ip_network(f'167.77.194.47/{x}', 0)
    net2 = ip_network(f'167.77.200.25/{x}', 0)
    if net1 == net2:
        print(net1.num_addresses) # только выбираем предпоследнее
